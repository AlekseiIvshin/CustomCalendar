apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply from: '../jacoco.gradle'

ext {
    supportLibraryVersion = '23.4.0';
}

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        applicationId "com.eficksan.customcalendar"
        minSdkVersion 19
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        debug {
            testCoverageEnabled = true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    apt 'com.google.dagger:dagger-compiler:2.0'
    provided 'org.glassfish:javax.annotation:10.0-b28'
    compile "com.android.support:appcompat-v7:${supportLibraryVersion}"
    compile "com.android.support:support-v4:${supportLibraryVersion}"
    compile "com.android.support:design:${supportLibraryVersion}"
    compile 'com.p_v:flexiblecalendar:1.2.1'
    compile 'com.jakewharton:butterknife:7.0.1'
    compile 'io.reactivex:rxandroid:1.2.1'
    compile 'io.reactivex:rxjava:1.1.6'
    compile 'joda-time:joda-time:2.9.4'
    compile 'com.jakewharton:butterknife:7.0.1'
    compile 'com.google.dagger:dagger:2.0'
}


task checkstyle(type: Checkstyle, dependsOn: check) {
    group 'verification'
    configFile file('../config/checkstyle/checkstyle.xml')
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'
    // empty classpath
    classpath = files()
    //Do not fail build
    ignoreFailures = true
    reports {
        xml.enabled false
        html.enabled true
    }
}

task findbugs(type: FindBugs, dependsOn: check) {
    group 'verification'
    ignoreFailures = true
    excludeFilter = new File("${project.rootDir}/config/findbugs/exclude-filter.xml")
    classes = files("${project.rootDir}/app/build/intermediates/classes")
    source = fileTree('src/main/java/')
    classpath = files()
    effort = 'max'
    reports {
        xml.enabled false
        html.enabled true
    }
}

task pmd(type: Pmd, dependsOn: check) {
    ignoreFailures = true
    description 'Run pmd'
    group 'verification'

    ruleSetFiles = files("${project.rootDir}/config/pmd/rule-sets.xml")
//    ["basic", "braces", "strings", "design", "unusedcode"]
    source = fileTree('src/main/java')

    reports {
        xml.enabled = false
        html.enabled = true
    }
}
